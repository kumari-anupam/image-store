// Code generated by MockGen. DO NOT EDIT.
// Source: ./image_store_controller.go

// Package controller is a generated GoMock package.
package controller

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dbmodels "githum.com/anupam111/image-store/internal/db/dbmodels"
)

// MockImageStore is a mock of ImageStore interface.
type MockImageStore struct {
	ctrl     *gomock.Controller
	recorder *MockImageStoreMockRecorder
}

// MockImageStoreMockRecorder is the mock recorder for MockImageStore.
type MockImageStoreMockRecorder struct {
	mock *MockImageStore
}

// NewMockImageStore creates a new mock instance.
func NewMockImageStore(ctrl *gomock.Controller) *MockImageStore {
	mock := &MockImageStore{ctrl: ctrl}
	mock.recorder = &MockImageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageStore) EXPECT() *MockImageStoreMockRecorder {
	return m.recorder
}

// CreateImage mocks base method.
func (m *MockImageStore) CreateImage(image dbmodels.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockImageStoreMockRecorder) CreateImage(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockImageStore)(nil).CreateImage), image)
}

// CreateImageAlbum mocks base method.
func (m *MockImageStore) CreateImageAlbum(album dbmodels.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageAlbum", album)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImageAlbum indicates an expected call of CreateImageAlbum.
func (mr *MockImageStoreMockRecorder) CreateImageAlbum(album interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageAlbum", reflect.TypeOf((*MockImageStore)(nil).CreateImageAlbum), album)
}

// DeleteImage mocks base method.
func (m *MockImageStore) DeleteImage(imageName, albumName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", imageName, albumName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockImageStoreMockRecorder) DeleteImage(imageName, albumName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockImageStore)(nil).DeleteImage), imageName, albumName)
}

// DeleteImageAlbum mocks base method.
func (m *MockImageStore) DeleteImageAlbum(albumName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageAlbum", albumName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageAlbum indicates an expected call of DeleteImageAlbum.
func (mr *MockImageStoreMockRecorder) DeleteImageAlbum(albumName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageAlbum", reflect.TypeOf((*MockImageStore)(nil).DeleteImageAlbum), albumName)
}

// GetAllImages mocks base method.
func (m *MockImageStore) GetAllImages(albumName string) ([]dbmodels.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllImages", albumName)
	ret0, _ := ret[0].([]dbmodels.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImages indicates an expected call of GetAllImages.
func (mr *MockImageStoreMockRecorder) GetAllImages(albumName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImages", reflect.TypeOf((*MockImageStore)(nil).GetAllImages), albumName)
}

// GetImage mocks base method.
func (m *MockImageStore) GetImage(id string) (dbmodels.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", id)
	ret0, _ := ret[0].(dbmodels.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImageStoreMockRecorder) GetImage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageStore)(nil).GetImage), id)
}
