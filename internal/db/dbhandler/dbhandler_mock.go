// Code generated by MockGen. DO NOT EDIT.
// Source: ./dbhandler.go

// Package dbhandler is a generated GoMock package.
package dbhandler

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dbmodels "githum.com/anupam111/image-store/internal/db/dbmodels"
)

// MockImageStore is a mock of ImageStore interface.
type MockImageStore struct {
	ctrl     *gomock.Controller
	recorder *MockImageStoreMockRecorder
}

// MockImageStoreMockRecorder is the mock recorder for MockImageStore.
type MockImageStoreMockRecorder struct {
	mock *MockImageStore
}

// NewMockImageStore creates a new mock instance.
func NewMockImageStore(ctrl *gomock.Controller) *MockImageStore {
	mock := &MockImageStore{ctrl: ctrl}
	mock.recorder = &MockImageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageStore) EXPECT() *MockImageStoreMockRecorder {
	return m.recorder
}

// CreateAlbum mocks base method.
func (m *MockImageStore) CreateAlbum(album dbmodels.Album) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAlbum", album)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAlbum indicates an expected call of CreateAlbum.
func (mr *MockImageStoreMockRecorder) CreateAlbum(album interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAlbum", reflect.TypeOf((*MockImageStore)(nil).CreateAlbum), album)
}

// CreateImage mocks base method.
func (m *MockImageStore) CreateImage(image dbmodels.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", image)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockImageStoreMockRecorder) CreateImage(image interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockImageStore)(nil).CreateImage), image)
}

// DeleteAlbum mocks base method.
func (m *MockImageStore) DeleteAlbum(albumName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAlbum", albumName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAlbum indicates an expected call of DeleteAlbum.
func (mr *MockImageStoreMockRecorder) DeleteAlbum(albumName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAlbum", reflect.TypeOf((*MockImageStore)(nil).DeleteAlbum), albumName)
}

// DeleteAllImagesOfAlbum mocks base method.
func (m *MockImageStore) DeleteAllImagesOfAlbum(albumName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllImagesOfAlbum", albumName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllImagesOfAlbum indicates an expected call of DeleteAllImagesOfAlbum.
func (mr *MockImageStoreMockRecorder) DeleteAllImagesOfAlbum(albumName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllImagesOfAlbum", reflect.TypeOf((*MockImageStore)(nil).DeleteAllImagesOfAlbum), albumName)
}

// DeleteImageWithImageName mocks base method.
func (m *MockImageStore) DeleteImageWithImageName(imageName, albumName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageWithImageName", imageName, albumName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageWithImageName indicates an expected call of DeleteImageWithImageName.
func (mr *MockImageStoreMockRecorder) DeleteImageWithImageName(imageName, albumName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageWithImageName", reflect.TypeOf((*MockImageStore)(nil).DeleteImageWithImageName), imageName, albumName)
}

// GetAllImages mocks base method.
func (m *MockImageStore) GetAllImages(albumName string) ([]dbmodels.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllImages", albumName)
	ret0, _ := ret[0].([]dbmodels.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllImages indicates an expected call of GetAllImages.
func (mr *MockImageStoreMockRecorder) GetAllImages(albumName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllImages", reflect.TypeOf((*MockImageStore)(nil).GetAllImages), albumName)
}

// GetImageByID mocks base method.
func (m *MockImageStore) GetImageByID(imageID string) (dbmodels.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByID", imageID)
	ret0, _ := ret[0].(dbmodels.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByID indicates an expected call of GetImageByID.
func (mr *MockImageStoreMockRecorder) GetImageByID(imageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByID", reflect.TypeOf((*MockImageStore)(nil).GetImageByID), imageID)
}
