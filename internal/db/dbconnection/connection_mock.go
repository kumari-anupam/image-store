// Code generated by MockGen. DO NOT EDIT.
// Source: ../../config/config.go

// Package dbconnection is a generated GoMock package.
package dbconnection

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockDBConnector is a mock of DBConnector interface.
type MockDBConnector struct {
	ctrl     *gomock.Controller
	recorder *MockDBConnectorMockRecorder
}

// MockDBConnectorMockRecorder is the mock recorder for MockDBConnector.
type MockDBConnectorMockRecorder struct {
	mock *MockDBConnector
}

// NewMockDBConnector creates a new mock instance.
func NewMockDBConnector(ctrl *gomock.Controller) *MockDBConnector {
	mock := &MockDBConnector{ctrl: ctrl}
	mock.recorder = &MockDBConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBConnector) EXPECT() *MockDBConnectorMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockDBConnector) Connect(driverName, dbConnection string) *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", driverName, dbConnection)
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockDBConnectorMockRecorder) Connect(driverName, dbConnection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDBConnector)(nil).Connect), driverName, dbConnection)
}
